package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class LoanAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLoanAllPropertiesEquals(Loan expected, Loan actual) {
        assertLoanAutoGeneratedPropertiesEquals(expected, actual);
        assertLoanAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLoanAllUpdatablePropertiesEquals(Loan expected, Loan actual) {
        assertLoanUpdatableFieldsEquals(expected, actual);
        assertLoanUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLoanAutoGeneratedPropertiesEquals(Loan expected, Loan actual) {
        assertThat(expected)
            .as("Verify Loan auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLoanUpdatableFieldsEquals(Loan expected, Loan actual) {
        assertThat(expected)
            .as("Verify Loan relevant properties")
            .satisfies(e ->
                assertThat(e.getRequestedAmount())
                    .as("check requestedAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getRequestedAmount())
            )
            .satisfies(e ->
                assertThat(e.getInterestRate())
                    .as("check interestRate")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getInterestRate())
            )
            .satisfies(e -> assertThat(e.getPaymentTermMonths()).as("check paymentTermMonths").isEqualTo(actual.getPaymentTermMonths()))
            .satisfies(e -> assertThat(e.getApplicationDate()).as("check applicationDate").isEqualTo(actual.getApplicationDate()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLoanUpdatableRelationshipsEquals(Loan expected, Loan actual) {
        // empty method
    }
}
