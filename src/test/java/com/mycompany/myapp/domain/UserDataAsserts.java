package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class UserDataAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserDataAllPropertiesEquals(UserData expected, UserData actual) {
        assertUserDataAutoGeneratedPropertiesEquals(expected, actual);
        assertUserDataAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserDataAllUpdatablePropertiesEquals(UserData expected, UserData actual) {
        assertUserDataUpdatableFieldsEquals(expected, actual);
        assertUserDataUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserDataAutoGeneratedPropertiesEquals(UserData expected, UserData actual) {
        assertThat(expected)
            .as("Verify UserData auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserDataUpdatableFieldsEquals(UserData expected, UserData actual) {
        assertThat(expected)
            .as("Verify UserData relevant properties")
            .satisfies(e -> assertThat(e.getSalary()).as("check salary").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getSalary()))
            .satisfies(e -> assertThat(e.getFamilyLoad()).as("check familyLoad").isEqualTo(actual.getFamilyLoad()))
            .satisfies(e -> assertThat(e.getWorkplace()).as("check workplace").isEqualTo(actual.getWorkplace()))
            .satisfies(e -> assertThat(e.getHousingType()).as("check housingType").isEqualTo(actual.getHousingType()))
            .satisfies(e ->
                assertThat(e.getRentCost()).as("check rentCost").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getRentCost())
            )
            .satisfies(e -> assertThat(e.getYearsOfEmployment()).as("check yearsOfEmployment").isEqualTo(actual.getYearsOfEmployment()))
            .satisfies(e -> assertThat(e.getEmploymentStatus()).as("check employmentStatus").isEqualTo(actual.getEmploymentStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserDataUpdatableRelationshipsEquals(UserData expected, UserData actual) {
        // empty method
    }
}
